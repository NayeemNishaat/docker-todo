Important: We need different dockerfile for frontend and backend to create frontend image and backend image. And finally at the root we will use docker-compose.yaml to combine these two image containers and fire them up!

Chapter: Init:
Install the docker desktop app!

Chapter: Create Config File:
dockerfile

// Part: Basic Config
FROM node:18
MAINTAINER nayeemnishaat@gmail.com
# RUN apk add --no-cache python2 g++ make
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "src/index.js"]
EXPOSE 3000

// Part: Explanation
Key: FROM -> It tells docker, from which base image you want to base your image from. In our example, we are creating an image from the node image. FROM instruction used to specify the valid docker image name. So specified Docker Image will be downloaded from docker hub registry if it is not exists locally.
Point: Examples:
	from docker.io/centos:latest
	from docker.io/centos:6

Key: MAINTAINER -> The next command is the person who is going to maintain this image. Here you specify the MAINTAINER keyword and just mention the email ID.
Point: Examples:
	maintainer administrator
	maintainer admin @ learnitguide.net
	maintainer devops engineer(admin @ learnitguide.net)

Key: LABEL -> LABEL instruction is used to specify metadata informations to an image. A LABEL is a key-value  pair.
Point: Examples:
	label “application_environment”=”development”
	label “application_support”=”learnitguide.net group”

Key: EXPOSE -> EXPOSE instruction is used to inform about the network ports that the container listens on runtime. Docker uses this information to interconnect containers using links and to set up port redirection on docker host system.
Point: Examples:
	expose 80 443
	expose 80/tcp 8080/udp

Key: ADD -> ADD instruction is used to copy files, directories and remote URL files to the destination (docker container) within the filesystem of the Docker Images. Add instruction also has two forms – Shell Form and Executable Form.
Point: Examples: ADD src dest
	ADD testfile data

Key: RUN -> RUN instruction is used to executes any commands on top of the current image and this will create a new layer. RUN instruction has two forms – Shell Form and Executable Form.
Point: Examples:
	run yum update
	run systemctl start httpd

Key: WORKDIR -> WORKDIR instruction is used to set the working directory.
Point: Examples:
	workdir /app/
	workdir /java_dst/

Key: COPY ->COPY instruction is used to copy files, directories and remote URL files to the destination within the filesystem of the Docker Images. COPY instruction also has two forms – Shell Form and Executable Form.
Point: Examples:
	copy src dest
	copy /root/testfile /data/
Remark: COPY . .
Note: First . -> Current Directory
Note: Second . -> WORKDIR Directory. So, in our case it will be /app!
The COPY instruction copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>. The <dest> is an absolute path, or a path relative to WORKDIR

Key: CMD -> CMD instruction is used to set a command to be executed when running a container. There must be only one CMD in a Dockerfile. If more than one CMD is listed, only the last CMD takes effect.
Point: Examples:
	cmd ping google.com
	cmd python myapplication.py

Key: ENTRYPOINT -> ENTRYPOINT instruction is used to configure and run a container as an executable.
Point: Examples:
	entrypoint ping google.com
	entrypoint python myapplication.py

Key: VOLUME -> VOLUME instruction is used to create or mount a volume to the docker container from the docker host filesystem.
Point: Examples:
	volume /data
	volume /appdata:/appdata

Key: USER -> USER instruction is used to set the username,group name, UID and GID for running subsequent commands. Else root user will be used.
Point: Examples:
	user webadmin
	user webadmin:webgroup
	user 1008
	user 1008:1200

Key: ENV -> ENV instruction is used to set environment variables with key and value. Lets say, we want to set variables APP_DIR and app_version with the values /data and 2.0 respectively. These variables will be set during the image build also available after the container launched.
Point: Examples:
	env app_dir /data/
	env app_version 2.0

Key: ARG -> ARG instruction is also used to set environment variables with key and value, but this variables will set only during the image build not on the container.
Point: Examples:
	arg tmp_name mycustom_image
	arg tmp_ver 2.0

Key: ONBUILD -> ONBUILD instruction is used to specify a command that runs when the image in the Dockerfile is used as a base image for another image.
Point: Examples: 
	onbuild add . /app/data
	onbuild run yum install httpd
Note: Ref -> https://www.learnitguide.net/2018/06/dockerfile-explained-with-examples.html

Chapter: Build Container Image
docker build -t todo .
Note: You should be in the root of the image folder befor running the command!
Key: -t is for setting a name to the image. Aka tag name.
Key: todo is the container's image name!
Key: . -> Current directory.

Chapter: Start the Container
docker run -dp 3000:3000 todo
Key: -d Means in detached mode (in the background).
Key: -p for mapping ports. host:sandbox! The sandbox port is exposed via EXPOSE 3000 command.

After all of this the app is live on http://localhost:3000 Important: This 3000 port is the port of the host!

Chapter: Re-build After Update
docker build -t todo .

Chapter: Start the Newly Created Image
Part: Remove the Existing Container
Key: Get all running containers -> docker ps
Key: Stop Container -> docker stop <the-container-id>
Key: Remove the Container -> docker rm <the-container-id>
Point: Stop and Remove in One Go -> docker rm -f <the-container-id>

Part: Finally Start the Updated Container docker run -dp 3000:3000 getting-started

Chapter: Share the  Image
Part: Log into Docker Hub
Part: Create a Repo, i.e. todo in docker hub!
Part: The image tag should be username/todo in order to be able to push to remote.
Note: Add a Tag -> docker tag todo username/todo
Note: Remove a Tag -> docker rmi todo
Part: Push to remote -> docker push username/todo:latest Remark: latest is the tag and username/todo is the repo name.

Chapter: Volume
Part: Create Volume for Persisting Data Across Multiple Containers
docker volume create todo-db
Part: Stop and Remove the todo App
docker rm -f <id>
Part: Start the todo app container, but add the -v flag to specify a volume mount. We will use the named volume and mount it to /etc/todos, which will capture all files created at the path.
docker run -dp 3000:3000 -v todo-db:/etc/todos nayeemnishaat/todo
Part: Now stop the container and restart (docker run -dp 3000:3000 -v todo-db:/etc/todos todo) and the data will be persistent.
Key: Inspect volume
docker volume inspect todo-db

Chapter: Bind Mount
A bind mount is a file or folder stored anywhere on the container host filesystem, mounted into a running container. The main difference a bind mount has from a volume is that since it can exist anywhere on the host filesystem, processes outside of Docker can also modify it.
Note: Start a Bind Mount -> -v "$(pwd):/app"
Part: Start dev-mode Container
docker run -dp 3000:3000 \
	-w /app -v "$(pwd):/app" \
	node:18 \
	bash -c "yarn install && yarn run dev"

Part: Explanation
Point: -dp 3000:3000 - same as before. Run in detached (background) mode and create a port mapping
Point: -w /app - sets the “working directory” or the current directory that the command will run from
Point: -v "$(pwd):/app" - bind mount the current directory from the host in the container into the /app directory
Point: node:12-alpine - the image to use. Note that this is the base image for our app from the Dockerfile
Point: sh -c "yarn install && yarn run dev" - the command. We’re starting a shell using sh (alpine doesn’t have bash) and running yarn install to install all dependencies and then running yarn run dev. If we look in the package.json, we’ll see that the dev script is starting nodemon.
Point: Show Logs
docker logs -f <CONTAINER ID>

Chapter: Multi-Container
Part: Create the network -> docker network create todo
Part: Start a MySQL container and attach it to the network
docker run -d \
     --network todo --network-alias mysql \ Important: --network-alias mysql later it will be used for digging ip for host mysql
     -v todo-mysql-data:/var/lib/mysql \
     -e MYSQL_ROOT_PASSWORD=secret \
     -e MYSQL_DATABASE=todos \
     mysql:5.7 Warning: Use 8 for developing latest applications

Point: Start Database -> docker start containerName (container name is random)
Point: Stop Database -> docker stop containerName (container name is random)

Chapter: Connect to MySQ
Part: Connect to DB -> docker exec -it <mysql-container-id> mysql -u root -p Note: The docker exec command runs a new command in a running container. -it is short for --interactive + --tty when you docker run with this command. It would take you straight inside of the container,, where -d is short for --detach which means you just run the container and then detach from it so basically you run container in the background.. edit : so if you run docker container with-itd it would run the-it options and detach you from the container, so your container still running in the background even without any default app to run. docker run -it ubuntu:xenial /bin/bash starts the container in the interactive mode (hence -it flag) that allows you to interact with /bin/bash of the container. That means now you will have bash session inside the container, so you can ls, mkdir, or do any bash command inside the container.

The key here is the word "interactive". If you omit the flag, the container still executes /bin/bash but exits immediately. With the flag, the container executes /bin/bash then patiently waits for your input.

Warning: Note: for MySQL versions 8.0 and higher, make sure to include the following commands in mysql
ALTER USER 'root' IDENTIFIED WITH mysql_native_password BY 'secret';
flush privileges;
Part: Start a new container using the nicolaka/netshoot image. Make sure to connect it to the same network.
docker run -it --network todo nicolaka/netshoot
Part: Look up the IP address for the hostname mysql

Part: We’ll specify each of the environment variables above, as well as connect the container to our app network.
docker run -dp 3000:3000 \
   -w /app -v "$(pwd):/app" \
   --network todo \
   -e MYSQL_HOST=mysql \
   -e MYSQL_USER=root \
   -e MYSQL_PASSWORD=secret \
   -e MYSQL_DB=todos \
   node:18 \
   bash -c "yarn install && yarn run dev"

Note: If we look at the logs for the container (docker logs <container-id>), we should see a message indicating it’s using the mysql database.

Part: Connect to the mysql database and prove that the items are being written to the database. Remember, the password is secret.
docker exec -it <mysql-container-id> mysql -p todos
And in the mysql shell, run the following: select * from todo_items;

Chapter: Ultimate Docker Compose
Note: Check Docker Compose Version -> docker-compose version Point: Linux needs to install docker-compose seperately.
Part: Create the Compose file -> touch docker-compose.yml
Key: services: -> Define the list of services (or containers) we want to run as part of our application.

Segment: Lets convert the previous command to docker-compose form
Key: Previous ->
	docker run -dp 3000:3000 \
	-w /app -v "$(pwd):/app" \
	--network todo-app \
	-e MYSQL_HOST=mysql \
	-e MYSQL_USER=root \
	-e MYSQL_PASSWORD=secret \
	-e MYSQL_DB=todos \
	node:18 \
	bash -c "yarn install && yarn run dev"

Key: Converted ->
	version: 3.7

	services:
		app:
			image: node:18
			command: bash -c "yarn install && yarn run dev"
			ports:
				- 80:3000
			working_dir: /app
			volumes:
				- ./:/app						Important: Current Host OS Dir 									: Sandbox OS Dir
			environment:
				MYSQL_HOST: mysql
				MYSQL_USER: root
				MYSQL_PASSWORD: secret
				MYSQL_DB: todos

		mysql:
			image: mysql:5.7
			volumes:
				- todo-mysql-data:/var/lib/mysql	Important: Path to Store in 									Host OS : Path where Stored 									in Sandbox OS
			environment:
				MYSQL_ROOT_PASSWORD: secret
				MYSQL_DATABASE: todos

	volumes:
		todo-mysql-data:						Important: Named volume with 											default settings.

Chapter: Run the Application Stack
Note: Make sure no other copies of the app/db are running first (docker ps and docker rm -f <ids>).
Part: Start up the application stack
docker-compose up -d
Part: Show All Logs
docker-compose logs -f	Note: -f for following logs to get live logs!
Part: Show Specific Logs
docker-compose logs -f <service name (app_1)>

Remark: By default the project name is the dir name where docker-compose.yml is located in.
Remark: The names are also a little more descriptive, as they follow the pattern of <project-name>_<service-name>_<replica-number>

Part: Tear it all down
docker-compose down	Note: It doesn’t remove the volume.

Warning: Removing Volumes
docker-compose down --volumes

Chapter: Security Scanning
docker scan <image-name (nayeemnishaat/todo)>

Chapter: Image Layering
docker image history nayeemnishaat/todo
docker image history --no-trunc nayeemnishaat/todo

Chapter: Caching
Update the Dockerfile to copy in the package.json first, install dependencies, and then copy everything else in.
FROM node:12-alpine
WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install --production
COPY . .
CMD ["node", "src/index.js"]
Part: Create a file named .dockerignore in the same folder as the Dockerfile with the content node_modules! So by doing this we are creating an image without the node_modules and making our image leaner.
Part: Build a new image using docker build
docker build -t nayeemnishaat/todo .

Chapter: Multi-Stage Builds
Part: React Example to Serve Only Static Files
FROM node:12 AS build
WORKDIR /app
COPY package* yarn.lock ./
RUN yarn install
COPY public ./public
COPY src ./src
RUN yarn run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html

Chapter: Next Step -> Container Orchestration via Kubernetes!